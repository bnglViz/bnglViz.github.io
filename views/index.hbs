<p><h1>BioNetGenLanguage (BNGL) code visualizer</h1></p>
<table><p id="bngl"></p>
<tr>
<td>
<input id="bngl-file-input" type="file">
<button id="visualize-button" type="button" onclick="visualize()">Visualize</button>
</td>
<td id="canvas-cell">
  <canvas id="testCanvas">
  </canvas>
</td>
<td id="canvas-text">
  Molecule is shown as an oval ...
</td>
</tr>
</table>
<div id="canvas-container"></div>
<table id="canvas-table"></table>
{{!-- possible bngl: EGFR(Y~U!1,State~active).EGF(Site0!1) --}}
<script src="/model-graphics.js"></script>
<script>
  //get major elements
    testCanvas = document.getElementById("testCanvas");
    //draw object on canvas
    //mode can be compartment, normal, or compact
    var drawObj = new Graphic('Molecule(site0,site1~state1~state2, site2~state1~state2~state3)', "normal");
    drawObj.draw(testCanvas, 0, 0);
    dims = [drawObj.x, drawObj.y];
    //resize canvas
    testCanvas.width = dims[0];
    testCanvas.height = dims[1];
    //draw graphic
    drawObj.doDrawList();
  
  const canvContain = document.getElementById("canvas-container");
  const canvTable = document.getElementById("canvas-table");

  //remove item from array
  function arrayRemove(arr, value) {
    var index = arr.indexOf(value);
    if (index > -1) {
      arr.splice(index, 1);
    }
    return arr;
  }

  function standardizeElm(elm) {
    //create new html element for string inputs
    if (typeof elm == "string") {
      newP = document.createElement("p");
      newP.innerHTML = elm;
      elm = newP;
    }
    return elm;
  }

  function addElmLast(child, parent) {
    parent.appendChild(standardizeElm(child));
  }

  function addToTable(elmNestedList, table) {
    //iterate through rows
    for (let rowNum = 0; rowNum < elmNestedList.length; rowNum++) {
      let row = elmNestedList[rowNum];
      //make new row
      let tempRow = document.createElement("tr");
      tempRow.classList.add("canvas-row");
      addElmLast(tempRow, table);
      //iterate though elements in row
      for (let elmNum = 0; elmNum < row.length; elmNum++) {
        let elm = standardizeElm(row[elmNum]);
        //insert elm into row
        let tempTD = document.createElement("td");
        tempTD.classList.add("TableCell");
        addElmLast(elm, tempTD);
        addElmLast(tempTD, tempRow);
      }
    }
  }

  //extract bngl element
  function extractBNGL(bnglStr, elmStr) {
    let beginToken = "begin " + elmStr;
    startIndex = bnglStr.indexOf(beginToken);
    if (startIndex >= 0) {
      //find first new line
      let nlDist = 0;
      while (bnglStr[startIndex + beginToken.length + nlDist] != "\n") {
        nlDist += 1;
      }
      //split by line
      endIndex = bnglStr.indexOf("\n" + "end " + elmStr);
      let sliced = bnglStr.slice(
        startIndex + nlDist + beginToken.length + 1,
        endIndex
      );
      //clean list
      let bngls = sliced.split("\n");
      let toDelete = [];
      for (let u = 0; u < bngls.length; u++) {
        let bngl = bngls[u];
        bngls[u] = bngl.trim();
        //remove comments
        let s = bngls[u];
        let c = s.search("#");
        if (c >= 0) {
          bngls[u] = s.slice(0, c + 1);
          if (c == 0) {
            toDelete.push(bngls[u]);
            continue;
          }
        }
        //remove internal whitespace
        s = bngls[u];
        c = s.search(/\s/);
        if (c >= 0) {
          bngls[u] = s.slice(0, c + 1);
        }
        //mark empty strings for deletion
        if (!bngls[u]) {
          toDelete.push(bngls[u]);
        }
      }
      //delete empty strings
      for (let u = 0; u < toDelete.length; u++) {
        arrayRemove(bngls, toDelete[u]);
      }
      return bngls;
    } else {
      return [];
    }
  }

  //render one set (need to add compartments)
  function prepareRow(objBNGL, title) {
    //add paranthesis if there are none
    if (objBNGL.indexOf("(") < 0) {
      objBNGL = objBNGL + "()";
    }
    //get name (change this to only after parenthesis)
    let name = objBNGL.split("(")[0];
    //create new canvas
    const newCan = document.createElement("canvas");
    newCan.id = title;
    newCan.width = "0";
    newCan.height = "0";
    newCan.classList.add("bngl-canvas");
    //draw object on canvas
    //mode can be compartment, normal, or compact
    var drawObj = new Graphic(objBNGL, "normal");
    drawObj.draw(newCan, 0, 0);
    dims = [drawObj.x, drawObj.y];
    //resize canvas
    newCan.width = dims[0];
    newCan.height = dims[1];
    //draw graphic
    drawObj.doDrawList();
    //output as list
    return [name, newCan, objBNGL];
  }

  //render everything in bngl
  function visualize() {
    var bnglFile = document.getElementById("bngl-file-input").files[0];

    reader = new FileReader();
    reader.onload = () => {
      let bngl = reader.result;
      //process all things of intrest
      //var MoleculesString = new RegExp ("molecule types|molecular types|molecules");
       //console.log(MoleculesString);
       molecules = extractBNGL(bngl, "molecular types");
       species = extractBNGL(bngl, "seed species");
      //(extractBNGL(bngl, "molecular types"),extractBNGL(bngl, "molec
      //add header
      if (molecules.length > 0 || species.length > 0) {
        const NameHeader = document.createElement("h3");
        NameHeader.innerHTML = "Name";
        const VisualHeader = document.createElement("h3");
        VisualHeader.innerHTML = "Visualization";
        const BNGLHeader = document.createElement("h3");
        BNGLHeader.innerHTML = "BNGL code";

        addToTable([[NameHeader, VisualHeader,BNGLHeader]], canvTable);
      } else {
        addToTable([["No Species or Molecules found.", "", ""]], canvTable);
      }
      //render molecules
      if (molecules.length > 0) {
        const mcHeader = document.createElement("h1");
        mcHeader.innerHTML = "Molecules";
        addElmLast(mcHeader, canvContain);
        let molcList = [];
        for (let i = 0; i < molecules.length; i++) {
          molcList.push(prepareRow(molecules[i], "molecules" + i));
        }
        addToTable(molcList, canvTable);
      }
      //render species
      if (species.length > 0) {
        const scHeader = document.createElement("h1");
        scHeader.innerHTML = "Species";
        addElmLast(scHeader, canvContain);
        let specList = [];
        for (let i = 0; i < species.length; i++) {
          specList.push(prepareRow(species[i], "species" + i));
        }
        addToTable(specList, canvTable);
      }
    }
    reader.readAsText(bnglFile);
  }
</script>
