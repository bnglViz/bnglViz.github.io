<p><h1>BioNetGenLanguage (BNGL) code visualizer</h1></p>
<table>
  <tr>
    <td>
      <input id="bngl-file-input" type="file" onchange="visualize()">
    </td>
    <td id="canvas-cell">
      <canvas id="testCanvas" width="500" height="180"></canvas>
    </td>
    <td id="canvas-text">
      Molecule is shown as an oval ...
    </td>
  </tr>
</table>
<div id="canvas-container"></div>
<div id="table-container"></div>
<script src="/model-graphics.js"></script>
<script src="/bngl-extractor.js"></script>
<script>
  //set bngl begin tokens
  const moleculeTokens = ["molecule types", "molecular types"];
  const speciesTokens = ["species", "seed species"];
  const observablesTokens = ["observables"];
  const reactionTokens = ["reaction rules"];

  //get major elements
  const testCanvas = document.getElementById("testCanvas");
  const canvContain = document.getElementById("canvas-container");
  const tableContain = document.getElementById("table-container");
  const fileInput = document.getElementById("bngl-file-input");
  const body = document.body;

  //other global var declaration
  var oldFileInputValue = "";
  var allElms;
  var mm = new MoleculeManager();
  var be = new BNGLExtractor();

  //set mode to dark mode initially
  var darkMode = true;
  switchDarkMode(false);

  function switchDarkMode(actuallySwitch = true) {
    //recompile list of elms
    allElms = body.getElementsByTagName("*");
    let len = allElms.length;
    let oldClass, newClass;
    //switch mode
    if (actuallySwitch) {
      if (darkMode) {
        darkMode = false;
        oldClass = "dark-mode";
        newClass = "light-mode";
      } else {
        darkMode = true;
        oldClass = "light-mode";
        newClass = "dark-mode";
      }
    }
    //change css classes
    for (let i = 0; i < len; i++) {
      allElms[i].classList.remove(oldClass);
      allElms[i].classList.add(newClass);
    }
    //body must be completed sepratley
    body.classList.remove(oldClass);
    body.classList.add(newClass);
  }

  function capitalizeFirstLetter(s) {
    let words = s.split(" ");
    words.forEach((word, i) => {
      words[i] = word[0].toUpperCase() + word.slice(1, s.length);
    });
    return words.join(' ');
  }

  //draw test canvas
  drawBNGL('z(a)', testCanvas);

  //draw bngl
  function drawBNGL(bngl, canvas, type = "") {
    //set up drawing context. "willReadFrequently: true" puts processes in GPU
    let ctx = canvas.getContext("2d", { willReadFrequently: true });
    let drawObj;
    if (type === "observables") {
      drawObj = new Graphic(bngl, "compact", darkMode, mm);
    } else if (type === "reactions") {
      [reactants, products, sign] = bngl;
      drawObj = new Reaction(reactants, products, sign, ctx, darkMode);
    } else {
      drawObj = new Graphic(bngl, "compact", darkMode);
    }
    drawObj.draw(ctx, 0, 0);
    //draw graphic
    drawObj.doDrawList();
    let dims = getCanvasDimentions(ctx);
    //resize canvas
    canvas.width = dims[0];
    canvas.height = dims[1];
    //have to redraw
    drawObj.doDrawList();
    if ((type === "molecules" || type === "species") && !mm.has(drawObj)) {
      mm.addMolecule(drawObj);
    }
  }

  //remove item from array
  function arrayRemove(arr, value) {
    var index = arr.indexOf(value);
    if (index > -1) {
      arr.splice(index, 1);
    }
    return arr;
  }

  function standardizeElm(elm) {
    //create new html element for string inputs
    if (typeof elm == "string") {
      newP = document.createElement("p");
      newP.innerHTML = elm;
      elm = newP;
    }
    return elm;
  }

  function addElmLast(child, parent) {
    parent.appendChild(standardizeElm(child));
  }

  function addToTable(elmNestedList, table, colSpan=0) {
    //iterate through rows
    for (let rowNum = 0; rowNum < elmNestedList.length; rowNum++) {
      let row = elmNestedList[rowNum];
      //make new row
      let tempRow = document.createElement("tr");
      tempRow.classList.add("canvas-row");
      addElmLast(tempRow, table);
      //iterate though elements in row
      for (let elmNum = 0; elmNum < row.length; elmNum++) {
        let elm = standardizeElm(row[elmNum]);
        //insert elm into row
        let tempTD = document.createElement("td");
        if (colSpan) {
          tempTD.colSpan = colSpan;
        }
        if (colSpan) {
          tempTD.classList.add("divider-td");
        } else {
          tempTD.classList.add("main-td");
        }
        addElmLast(elm, tempTD);
        addElmLast(tempTD, tempRow);
      }
    }
  }

  function addBNGLParenthesis(bngl) {
    //split into each molecule
    let molecules = bngl.split(".");
    let output = "";
    let len = molecules.length;
    molecules.forEach((m, i) => {
      //add paranthesis if there are none
      if (m.indexOf("(") < 0) {
        m = m + "()";
      }
      output += m;
      if (i != len - 1) {
        output += ".";
      }
    });
    return output;
  }

  //render one set (need to add compartments)
  function prepareRow(bnglConcPair, type) {
    let bngl, conc, comment, name;
    if (type != "reactions") {
      [bngl, conc, comment, observType] = bnglConcPair;
      comment = comment.trim();
      bngl = bngl.trim();
      conc = conc.trim();
      observType = observType.trim();
      if (type == "observables") {
        let temp;
        temp = bngl;
        bngl = conc;
        conc = temp;
        name = conc;
      }
      //add paranthesis if there are none
      bngl = addBNGLParenthesis(bngl);
      //get name (change this to only after parenthesis)
      if (type != "observables") {
        name = bngl.split("(")[0];
      }
    } else if (type === "reactions"){
      [reactants, products, sign, concentrations, comment] = bnglConcPair;
      bngl =[reactants, products, sign];
      //add paranthesis if there are none
      reactants.forEach((item, i) => {
        reactants[i] = addBNGLParenthesis(item);
      });
      products.forEach((item, i) => {
        products[i] = addBNGLParenthesis(item);
      });
    }
    //create new canvas
    const newCan = document.createElement("canvas");
    //must have inital dimensions as large as largest possible visualization
    newCan.width = "500";
    newCan.height = "180";
    newCan.classList.add("bngl-canvas");
    //draw object on canvas
    drawBNGL(bngl, newCan, type);
    //output as list
    if (type == "species") {
      return [name, newCan, bngl, conc, comment];
    } else if (type == "observables") {
      return [observType, name, newCan, bngl, comment];
    } else if (type == "reactions") {
      return [
        be.compileBNGL(bnglConcPair),
        newCan,
        concentrations.toString(),
        comment
      ];
    } else {
      return [name, newCan, bngl, comment];
    }
  }

  //render 1 type (molecules, species, etc)
  function visualizeType(type, list) {
    //add new table
    let newTable = document.createElement("table");
    addElmLast(newTable, tableContain);
    //render header
    if (type != "header comments" || list.length > 0) {
      addToTable([[document.createElement("hr")]], newTable, 5);
      const newDivider = document.createElement("p");
      newDivider.innerHTML = capitalizeFirstLetter(type);
      newDivider.classList.add("table-divider");
      addToTable([[newDivider]], newTable, 5);
      if (type == "observables") {
        addToTable(
          [['Type', 'Name', 'Visualization', 'BNGL code', 'Comment']],
          newTable
        );
      } else if (type == "molecules") {
        addToTable(
          [['Name', 'Visualization', 'BNGL code', 'Comment']],
          newTable
        );
      } else if (type === "reactions") {
        addToTable(
          [['BNGL code', 'Visualization', "Concentrations", 'Comment']],
          newTable
        );
      } else if (type != "header comments") {
        addToTable(
          [['Name', 'Visualization', 'BNGL code', 'Concentration', 'Comment']],
          newTable
        );
      }
      //render rows
      if (list.length > 0) {
        let output = [];
        for (let i = 0; i < list.length; i++) {
          item = list[i];
          //normal row
          if (typeof item == "object") {
            addToTable([prepareRow(item, type)], newTable);
          }
          //full line comment
          else if (typeof item == "string") {
            addToTable([[item]], newTable, 5);
          }
        }
      } else {
        addToTable([["None", "", "", ""]], newTable);
      }
    }
  }

  //render everything in bngl
  function visualize() {
    //remove all old visualizations
    let fileHasChanged = fileInput.value != oldFileInputValue;
    oldFileInputValue = fileInput.value;
    //remove everything in table
    let oldElms = tableContain.children;
    let numOldElms = oldElms.length;
    for(let i = 0; i < numOldElms; i++) {
      oldElms[0].remove();
    }
    //remove everything in canvas div
    oldElms = canvContain.children;
    numOldElms = oldElms.length;
    for(let i = 0; i < numOldElms; i++) {
      oldElms[0].remove();
    }
    //reset molecule manager
    mm.reset();
    //render new file
    var bnglFile = fileInput.files[0];
    reader = new FileReader();
    reader.onload = () => {
      let bngl = reader.result;
      //process all things of intrest
      comments = be.extractComments(bngl);
      molecules = be.extractBNGL(bngl, moleculeTokens);
      species = be.extractBNGL(bngl, speciesTokens);
      observables = be.extractBNGL(bngl, observablesTokens, "observable");
      reactions = be.extractBNGL(bngl, reactionTokens, "reaction");
      //visualize everything
      visualizeType("header comments", comments);
      visualizeType("molecules", molecules);
      visualizeType("species", species);
      visualizeType("observables", observables);
      visualizeType("reactions", reactions);
    }
    //read if file present
    if (fileInput.value) {
      reader.readAsText(bnglFile);
    }
  }
</script>
