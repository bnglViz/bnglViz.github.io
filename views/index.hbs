<p><h1>BioNetGenLanguage (BNGL) code visualizer</h1></p>
<table>
  <tr>
    <td>
      <input id="bngl-file-input" type="file">
      <button id="visualize-button" type="button" onclick="visualize()">Visualize</button>
    </td>
    <td id="canvas-cell">
      <canvas id="testCanvas"></canvas>
    </td>
    <td id="canvas-text">
      Molecule is shown as an oval ...
    </td>
  </tr>
</table>
<div id="canvas-container"></div>
<table id="canvas-table"></table>
<script src="/model-graphics.js"></script>
<script>
  //set bngl species and molecule begin tokens
  const speciesTokens = ["molecule types", "molecular types"];
  const moleculeTokens = ["species", "seed species"];

  //get major elements
  const testCanvas = document.getElementById("testCanvas");
  const canvContain = document.getElementById("canvas-container");
  const canvTable = document.getElementById("canvas-table");
  const fileInput = document.getElementById("bngl-file-input");
  var oldFileInputValue = "";

  //draw test canvas
  drawBNGL(
    'Molecule(site0,site1~state1~state2, site2~state1~state2~state3)',
    testCanvas
  );

  //draw bngl
  function drawBNGL(bngl, canvas) {
    //mode can be compartment, normal, or compact
    var drawObj = new Graphic(bngl, "normal");
    drawObj.draw(canvas, 0, 0);
    //resize canvas
    dims = [drawObj.x, drawObj.y];
    canvas.width = dims[0];
    canvas.height = dims[1];
    //draw graphic
    drawObj.doDrawList();
  }

  //remove item from array
  function arrayRemove(arr, value) {
    var index = arr.indexOf(value);
    if (index > -1) {
      arr.splice(index, 1);
    }
    return arr;
  }

  function standardizeElm(elm) {
    //create new html element for string inputs
    if (typeof elm == "string") {
      newP = document.createElement("p");
      newP.innerHTML = elm;
      elm = newP;
    }
    return elm;
  }

  function addElmLast(child, parent) {
    parent.appendChild(standardizeElm(child));
  }

  function addToTable(elmNestedList, table, divider=false) {
    //iterate through rows
    for (let rowNum = 0; rowNum < elmNestedList.length; rowNum++) {
      let row = elmNestedList[rowNum];
      //make new row
      let tempRow = document.createElement("tr");
      tempRow.classList.add("canvas-row");
      addElmLast(tempRow, table);
      //iterate though elements in row
      for (let elmNum = 0; elmNum < row.length; elmNum++) {
        let elm = standardizeElm(row[elmNum]);
        //insert elm into row
        let tempTD = document.createElement("td");
        if (divider) {
          tempTD.colSpan = 3;
        }
        if (divider) {
          tempTD.classList.add("divider-td");
        } else {
          tempTD.classList.add("main-td");
        }
        addElmLast(elm, tempTD);
        addElmLast(tempTD, tempRow);
      }
    }
  }

  //extract bngl element
  function extractBNGL(bnglStr, elmStrList) {
    let bngls = [];
    let toDelete = [];
    for (let i = 0; i < elmStrList.length; i++) {
      let elmStr = elmStrList[i];
      let beginToken = "begin " + elmStr;
      let startIndex = bnglStr.indexOf(beginToken);
      if (startIndex >= 0) {
        //find first new line
        let nlDist = 0;
        while (bnglStr[startIndex + beginToken.length + nlDist] != "\n") {
          nlDist += 1;
        }
        //split by line
        let endIndex = bnglStr.indexOf("\n" + "end " + elmStr);
        let sliced = bnglStr.slice(
          startIndex + nlDist + beginToken.length + 1,
          endIndex
        );
        bngls = bngls.concat(sliced.split("\n"));
        //clean list
        for (let u = 0; u < bngls.length; u++) {
          let bngl = bngls[u];
          bngls[u] = bngl.trim();
          //remove comments
          let s = bngls[u];
          let c = s.search("#");
          if (c >= 0) {
            bngls[u] = s.slice(0, c + 1);
            if (c == 0) {
              toDelete.push(bngls[u]);
              continue;
            }
          }
          //remove leading numbers
          s = bngls[u];
          if (!isNaN(parseFloat(s[0]))) {// if first character is number
            bngls[u] = s.slice(s.search(/\s/) + 1, s.length);
          }
          //remove internal whitespace
          s = bngls[u];
          c = s.search(/\s/);
          if (c >= 0) {
            bngls[u] = s.slice(0, c + 1);
          }
          //mark empty strings for deletion
          if (!bngls[u]) {
            toDelete.push(bngls[u]);
          }
        }
        //if begin token not found
        } else {
          continue;
        }
      }
      //delete empty strings
      for (let u = 0; u < toDelete.length; u++) {
        arrayRemove(bngls, toDelete[u]);
      }
      return bngls;
  }

  //render one set (need to add compartments)
  function prepareRow(objBNGL, title) {
    //add paranthesis if there are none
    if (objBNGL.indexOf("(") < 0) {
      objBNGL = objBNGL + "()";
    }
    //get name (change this to only after parenthesis)
    let name = objBNGL.split("(")[0];
    //create new canvas
    const newCan = document.createElement("canvas");
    newCan.id = title;
    newCan.width = "0";
    newCan.height = "0";
    newCan.classList.add("bngl-canvas");
    //draw object on canvas
    //drawBNGL(objBNGL, newCan);
    //mode can be compartment, normal, or compact
    var drawObj = new Graphic(objBNGL, "normal");
    drawObj.draw(newCan, 0, 0);
    dims = [drawObj.x, drawObj.y];
    //resize canvas
    newCan.width = dims[0];
    newCan.height = dims[1];
    //draw graphic
    drawObj.doDrawList();
    //output as list
    return [name, newCan, objBNGL];
  }

  //render everything in bngl
  function visualize() {
    //remove all old visualizations
    let fileHasChanged = fileInput.value != oldFileInputValue;
    oldFileInputValue = fileInput.value;
    //remove everything in table
    let oldElms = canvTable.children;
    let numOldElms = oldElms.length;
    for(let i = 0; i < numOldElms; i++) {
      oldElms[0].remove();
    }
    //remove everything in canvas div
    oldElms = canvContain.children;
    numOldElms = oldElms.length;
    for(let i = 0; i < numOldElms; i++) {
      oldElms[0].remove();
    }
    var bnglFile = fileInput.files[0];
    reader = new FileReader();
    reader.onload = () => {
      let bngl = reader.result;
      //process all things of intrest
      molecules = extractBNGL(bngl, moleculeTokens);
      species = extractBNGL(bngl, speciesTokens);
      //add header
      if (molecules.length > 0 || species.length > 0) {
        const nameHeader = document.createElement("h3");
        nameHeader.innerHTML = "Name";
        nameHeader.classList.add("bngl-header");
        const visualHeader = document.createElement("h3");
        visualHeader.innerHTML = "Visualization";
        visualHeader.classList.add("bngl-header");
        const BNGLHeader = document.createElement("h3");
        BNGLHeader.innerHTML = "BNGL code";
        BNGLHeader.classList.add("bngl-header");
        addToTable([[nameHeader, visualHeader, BNGLHeader]], canvTable);
      } else {
        //if nothing found
        addToTable([["No Species or Molecules found.", "", ""]], canvTable);
      }
      //render molecules
      if (molecules.length > 0) {
        const moleculeDivider = document.createElement("p");
        moleculeDivider.innerHTML = "Molecules";
        moleculeDivider.classList.add("table-divider");
        addToTable([[moleculeDivider]], canvTable, true);
        let molcList = [];
        for (let i = 0; i < molecules.length; i++) {
          molcList.push(prepareRow(molecules[i], "molecules" + i));
        }
        addToTable(molcList, canvTable);
      }
      //render species
      if (species.length > 0) {
        const scDivider = document.createElement("p");
        scDivider.innerHTML = "Species";
        scDivider.classList.add("table-divider");
        addToTable([[scDivider]], canvTable, true);
        let specList = [];
        for (let i = 0; i < species.length; i++) {
          specList.push(prepareRow(species[i], "species" + i));
        }
        addToTable(specList, canvTable);
      }
    }
    //read if file present
    if (fileInput.value) {
      reader.readAsText(bnglFile);
    }
  }
</script>
